name: CI

on:
  push:
    branches:
      - main
      - 'release/**'
      - 'Week*'
  pull_request:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      PROVIDER: mock

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install project dependencies
        run: |
          pip install -r requirements.txt
          pip install ruff pyright pytest
          if [ -f requirements-optional.txt ]; then
            pip install -r requirements-optional.txt
          fi
          if [ -f optional-requirements.txt ]; then
            pip install -r optional-requirements.txt
          fi

      - name: Prepare artifacts directory
        run: mkdir -p artifacts

      - name: Run ruff
        id: ruff
        run: ruff check .

      - name: Run pyright
        id: pyright
        continue-on-error: ${{ contains(github.ref_name, 'Week1') || contains(github.ref_name, 'week-1') || contains(github.ref_name, 'week1') || contains(github.head_ref, 'Week1') || contains(github.head_ref, 'week-1') || contains(github.head_ref, 'week1') }}
        run: pyright

      - name: Run pytest
        id: pytest
        run: pytest

      - name: Run image benchmarks
        id: image_bench
        if: ${{ hashFiles('bench/image_bench.py') != '' }}
        run: |
          mkdir -p artifacts
          python bench/image_bench.py || true

      - name: Run audio benchmarks
        id: audio_bench
        if: ${{ hashFiles('bench/audio_bench.py') != '' }}
        run: |
          mkdir -p artifacts
          python bench/audio_bench.py || true

      - name: Run hero benchmark
        id: hero_bench
        if: ${{ hashFiles('bench/e2e_demo1_bench.py') != '' }}
        run: |
          mkdir -p artifacts
          python bench/e2e_demo1_bench.py || true

      - name: Inventory repository
        id: inventory
        run: python scripts/inventory_repo.py --strict

      - name: Run latency benchmark
        id: latency
        if: ${{ hashFiles('bench/latency_bench.py') != '' }}
        run: |
          set -o pipefail
          if python bench/latency_bench.py --help >/tmp/latency_help.txt 2>&1; then
            if grep -q -- '--output' /tmp/latency_help.txt; then
              python bench/latency_bench.py --output artifacts/latency.csv
            else
              python bench/latency_bench.py | tee artifacts/latency.csv
            fi
          else
            python bench/latency_bench.py | tee artifacts/latency.csv
          fi

      - name: Run red-team evaluation
        id: redteam
        if: ${{ hashFiles('redteam/eval.py') != '' }}
        run: |
          set -o pipefail
          if python redteam/eval.py --help >/tmp/redteam_help.txt 2>&1; then
            if grep -q -- '--output' /tmp/redteam_help.txt; then
              python redteam/eval.py --output artifacts/redteam_report.json
            else
              python redteam/eval.py | tee artifacts/redteam_report.json
            fi
          else
            python redteam/eval.py | tee artifacts/redteam_report.json
          fi

      - name: Summarize results
        if: ${{ always() }}
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          PROVIDER: ${{ env.PROVIDER }}
        run: |
          reversal_flag_file="artifacts/reversal_gate.flag"
          rm -f "$reversal_flag_file"
          {
            echo "## CI Summary";
            echo "";
            echo "| Step | Status |";
            echo "| --- | --- |";
            echo "| Ruff | ${{ steps.ruff.outcome }} |";
            echo "| Pyright | ${{ steps.pyright.outcome }} |";
            echo "| Pytest | ${{ steps.pytest.outcome }} |";
            echo "| Inventory | ${{ steps.inventory.outcome }} |";
            if [ "${{ steps.latency.outcome }}" != "" ]; then
              echo "| Latency Bench | ${{ steps.latency.outcome }} |";
            fi
            if [ "${{ steps.redteam.outcome }}" != "" ]; then
              echo "| Red Team Eval | ${{ steps.redteam.outcome }} |";
            fi
            if [ "${{ steps.audio_bench.outcome }}" != "" ]; then
              echo "| Audio Bench | ${{ steps.audio_bench.outcome }} |";
            fi
            if [ "${{ steps.image_bench.outcome }}" != "" ]; then
              echo "| Image Bench | ${{ steps.image_bench.outcome }} |";
            fi
            if [ "${{ steps.hero_bench.outcome }}" != "" ]; then
              echo "| Hero Bench | ${{ steps.hero_bench.outcome }} |";
            fi
            echo "";
            echo "### Wearables SDK";
            echo "";
            echo "- Provider: ${PROVIDER:-unknown}";
            if [ -f artifacts/metrics.jsonl ]; then
              python - <<'PY'
import json
from pathlib import Path

path = Path("artifacts/metrics.jsonl")
capabilities_entry = None
permissions_entry = None

if path.exists():
    with path.open() as stream:
        for line in stream:
            line = line.strip()
            if not line:
                continue
            try:
                entry = json.loads(line)
            except json.JSONDecodeError:
                continue

            metric = entry.get("metric")
            if metric == "sdk.capabilities" and capabilities_entry is None:
                capabilities_entry = entry
            if metric == "permissions.time_to_ready_ms" and permissions_entry is None:
                permissions_entry = entry

            if capabilities_entry is not None and permissions_entry is not None:
                break


def _format_value(entry):
    if not entry:
        return None
    for key in ("value", "values", "capabilities", "metrics"):
        if key in entry and entry[key] not in (None, ""):
            value = entry[key]
            if isinstance(value, dict):
                if "value" in value and value["value"] not in (None, ""):
                    inner = value["value"]
                    if isinstance(inner, (dict, list, tuple)):
                        return json.dumps(inner, ensure_ascii=False)
                    return inner
                if "time_to_ready_ms" in value and value["time_to_ready_ms"] not in (None, ""):
                    return value["time_to_ready_ms"]
                return json.dumps(value, ensure_ascii=False)
            if isinstance(value, (list, tuple)):
                return json.dumps(value, ensure_ascii=False)
            return value
    return json.dumps(entry, ensure_ascii=False)


capabilities_value = _format_value(capabilities_entry)
permissions_value = _format_value(permissions_entry)

if capabilities_value is not None:
    print(f"- Capabilities: {capabilities_value}")
if permissions_value is not None:
    print(f"- Permissions time to ready (ms): {permissions_value}")
PY
            else
              echo "- Metrics: _artifacts/metrics.jsonl not found_.";
            fi
            echo "";
            if [ -f artifacts/audio_latency.csv ]; then
              echo "### Audio Latency Metrics";
              echo "";
              python - <<'PY'
import csv
from pathlib import Path

path = Path("artifacts/audio_latency.csv")
rows = []
with path.open(newline="") as f:
    reader = csv.reader(f)
    rows = [row for row in reader if any(cell.strip() for cell in row)]

if not rows:
    print("_Audio latency metrics file was empty (soft gate active)._\n")
else:
    header, *body = rows
    print("| " + " | ".join(header) + " |")
    print("| " + " | ".join("---" for _ in header) + " |")
    for row in body:
        print("| " + " | ".join(row) + " |")
    print()
PY
            else
              echo "_Audio latency metrics unavailable (Week 2 soft gate)._";
              echo "";
            fi
            if [ -f artifacts/image_latency.csv ]; then
              echo "### Vision Latency Metrics";
              echo "";
              python - <<'PY'
import csv
from pathlib import Path

path = Path("artifacts/image_latency.csv")
rows = []
with path.open(newline="") as f:
    reader = csv.reader(f)
    rows = [row for row in reader if any(cell.strip() for cell in row)]

if not rows:
    print("_Image latency metrics file was empty._\n")
else:
    header, *body = rows
    print("| " + " | ".join(header) + " |")
    print("| " + " | ".join("---" for _ in header) + " |")
    for row in body:
    print("| " + " | ".join(row) + " |")
    print()
PY
            fi
            if [ -f artifacts/e2e_hero1_summary.json ]; then
              echo "### Hero Caption Benchmark";
              echo "";
              python - <<'PY'
import json
from pathlib import Path

summary_path = Path("artifacts/e2e_hero1_summary.json")

summary = json.loads(summary_path.read_text())
stage_stats = summary.get("stages", {})
runs = summary.get("runs", 0)

print(f"_Runs: {runs}_")
print()
if stage_stats:
    print("| Stage | p50 (ms) | p95 (ms) |")
    print("| --- | --- | --- |")
    for stage, stats in stage_stats.items():
        label = stage.replace("_", " ")
        print(f"| {label} | {stats.get('p50_ms', 0.0):.3f} | {stats.get('p95_ms', 0.0):.3f} |")
    totals = summary.get("totals", {})
    if totals:
        print(f"| total | {totals.get('p50_ms', 0.0):.3f} | {totals.get('p95_ms', 0.0):.3f} |")
    print()
else:
    print("_No hero latency metrics available._\n")

fusion = summary.get("fusion", {})
if fusion:
    print("#### Fusion Metrics")
    print()
    print("| Metric | Value |")
    print("| --- | --- |")
    print(f"| audio p50 (ms) | {fusion.get('audio_p50_ms', 0.0):.3f} |")
    print(f"| vision p50 (ms) | {fusion.get('vision_p50_ms', 0.0):.3f} |")
    print(f"| combined p50 (ms) | {fusion.get('combined_p50_ms', 0.0):.3f} |")
    print(f"| mean score | {fusion.get('score_mean', 0.0):.3f} |")
    print(f"| mean audio confidence | {fusion.get('audio_conf_mean', 0.0):.3f} |")
    print(f"| mean vision confidence | {fusion.get('vision_conf_mean', 0.0):.3f} |")
    print()

fsm_counts = summary.get("fsm", {}).get("final_state_counts", {})
if fsm_counts:
    print("#### FSM Final State Distribution")
    print()
    print("| State | Count |")
    print("| --- | --- |")
    for state, count in fsm_counts.items():
        print(f"| {state} | {count} |")
    print()

threshold_warnings = []
for stage, stats in stage_stats.items():
    p50 = float(stats.get("p50_ms", 0.0))
    p95 = float(stats.get("p95_ms", 0.0))
    if p50 > 600.0:
        threshold_warnings.append(f":warning: {stage} p50 {p50:.1f} ms exceeds 600 ms target.")
    if p95 > 900.0:
        threshold_warnings.append(f":warning: {stage} p95 {p95:.1f} ms exceeds 900 ms target.")

if threshold_warnings:
    print("#### Hero Warnings")
    print()
    for line in threshold_warnings:
        print(f"- {line}")
    print()

if threshold_warnings:
    warn_path = Path("artifacts/e2e_hero1_warnings.json")
    warn_path.write_text(json.dumps(threshold_warnings, indent=2))
PY
            fi
            if [ -f artifacts/ocr_results.csv ]; then
              echo "### Synthetic OCR Metrics";
              echo "";
              python - <<'PY'
import csv
from pathlib import Path

path = Path("artifacts/ocr_results.csv")
rows = []
with path.open(newline="") as f:
    reader = csv.reader(f)
    rows = [row for row in reader if any(cell.strip() for cell in row)]

if not rows:
    print("_Synthetic OCR metrics file was empty._\n")
else:
    header, *body = rows
    print("| " + " | ".join(header) + " |")
    print("| " + " | ".join("---" for _ in header) + " |")
    for row in body:
        print("| " + " | ".join(row) + " |")
    print()
PY
            fi
            if [ -f artifacts/metrics.jsonl ]; then
              REVERSAL_FLAG_PATH="$reversal_flag_file" python - <<'PY'
import json
import os
import re
from pathlib import Path

path = Path("artifacts/metrics.jsonl")
latest = {"asr": None, "vad": None}
vision_rates = {}
ocr_precision = None
tracked_specs = {
    "asr.total_partials": "ASR total partials",
    "asr.reversal_rate": "ASR reversal rate",
    "audio_bench.reversal_rate": "Audio bench reversal rate",
    "asr.first_partial_ms": "ASR first partial (ms)",
    "vad.frames_processed": "VAD frames processed",
}
tracked_metrics = {
    metric: {"label": label, "value": None, "timestamp": None}
    for metric, label in tracked_specs.items()
}
reversal_sources = (
    "audio_bench.reversal_rate",
    "asr.reversal_rate",
)


def _coerce_float(value):
    try:
        return float(value)
    except Exception:
        return None


def _stringify(value):
    if value is None:
        return None
    if isinstance(value, (int, float)):
        return str(value)
    if isinstance(value, str):
        return value
    try:
        return json.dumps(value, ensure_ascii=False)
    except TypeError:
        return str(value)


def classify(entry):
    labels = []
    for key in ("task", "metric", "name", "tag", "category", "label"):
        value = entry.get(key)
        if isinstance(value, str):
            labels.append(value.lower())
    blob = " ".join(labels)
    if "asr" in blob or "speech_recognition" in blob:
        return "asr"
    if "vad" in blob or "voice_activity" in blob:
        return "vad"
    return None


def extract_value(entry):
    for key in ("value", "score", "wer", "f1", "accuracy", "metric_value"):
        if key in entry and isinstance(entry[key], (int, float, str)):
            return entry[key]
    metrics = entry.get("metrics")
    if isinstance(metrics, dict):
        for key in ("value", "score", "wer", "f1", "accuracy"):
            if key in metrics:
                return metrics[key]
    return json.dumps(entry, ensure_ascii=False)


with path.open() as stream:
    for line in stream:
        line = line.strip()
        if not line:
            continue
        try:
            entry = json.loads(line)
        except json.JSONDecodeError:
            continue
        bucket = classify(entry)
        if bucket and entry:
            latest[bucket] = entry
        metric = entry.get("metric")
        if metric in tracked_metrics:
            record = tracked_metrics[metric]
            value = entry.get("value")
            if value is None:
                for key in ("score", "wer", "f1", "accuracy", "metric_value"):
                    if key in entry:
                        value = entry[key]
                        break
            if value is None:
                metrics_blob = entry.get("metrics")
                if isinstance(metrics_blob, dict):
                    for key in ("value", "score", "wer", "f1", "accuracy"):
                        if key in metrics_blob:
                            value = metrics_blob[key]
                            break
            record["value"] = value
            timestamp = entry.get("timestamp")
            if timestamp is None:
                timestamp = entry.get("step")
            if timestamp is None:
                details = entry.get("details")
                if isinstance(details, (str, int, float)):
                    timestamp = details
            record["timestamp"] = _stringify(timestamp)
        if metric == "vision.keys_rate":
            tags = entry.get("tags") or {}
            clip = str(tags.get("clip", "unknown"))
            vision_rates[clip] = entry
        elif metric == "ocr.precision_synth":
            ocr_precision = entry


def _is_week4_or_later(ref):
    if not ref:
        return False
    match = re.search(r"week[-_\s]?(\d+)", ref, re.IGNORECASE)
    if match:
        try:
            return int(match.group(1)) >= 4
        except ValueError:
            return False
    return False


ref_candidates = [
    os.getenv("GITHUB_REF_NAME", ""),
    os.getenv("GITHUB_HEAD_REF", ""),
]
week_gate_active = any(_is_week4_or_later(ref) for ref in ref_candidates)
reversal_details = []
for source in reversal_sources:
    record = tracked_metrics.get(source)
    if not record:
        continue
    value = _coerce_float(record.get("value"))
    if value is not None:
        reversal_details.append((source, value))

flag_path = Path(os.getenv("REVERSAL_FLAG_PATH", "artifacts/reversal_gate.flag"))
reversal_warning_message = None
if week_gate_active and reversal_details:
    preferred_source, preferred_value = reversal_details[0]
    if preferred_value > 0.5:
        flag_path.parent.mkdir(parents=True, exist_ok=True)
        flag_path.write_text(f"{preferred_value:.6f}")
        reversal_warning_message = (
            f":warning: Audio reversal rate {preferred_value:.3f} exceeded the 0.5 threshold for Week 4+ runs."
        )
elif flag_path.exists():
    flag_path.unlink()


print("### ASR/VAD Metrics")
print()
print("| Metric | Value | Timestamp |")
print("| --- | --- | --- |")
for metric in (
    "asr.total_partials",
    "asr.reversal_rate",
    "audio_bench.reversal_rate",
    "asr.first_partial_ms",
    "vad.frames_processed",
):
    record = tracked_metrics[metric]
    value = record["value"]
    timestamp = record["timestamp"]
    value_display = "n/a" if value is None else _stringify(value)
    timestamp_display = timestamp if timestamp is not None else "n/a"
    print(f"| {record['label']} | {value_display} | {timestamp_display} |")
print()

has_tracked_values = any(record["value"] is not None for record in tracked_metrics.values())
if not has_tracked_values:
    print("_ASR/VAD metrics not yet available (soft gate)._\n")

if not any(latest.values()):
    if has_tracked_values:
        print("_No ASR or VAD metrics reported (soft gate)._\n")
else:
    print("| Metric | Value | Notes |")
    print("| --- | --- | --- |")
    for key, label in (("asr", "ASR"), ("vad", "VAD")):
        entry = latest[key]
        if not entry:
            print(f"| {label} | _missing_ | Week 2 collection pending |")
            continue
        value = extract_value(entry)
        detail = entry.get("details")
        if isinstance(detail, dict):
            detail = json.dumps(detail, ensure_ascii=False)
        elif detail is None:
            detail = entry.get("timestamp") or entry.get("step") or "Captured from metrics.jsonl"
        print(f"| {label} | {value} | {detail} |")
    print()
    print("_Threshold gating to be introduced in future sprints._\n")

print("### Vision Keyframe Rates")
print()
if not vision_rates:
    print("_No vision keyframe metrics available._\n")
else:
    print("| Clip | Rate | Timestamp |")
    print("| --- | --- | --- |")
    for clip, entry in sorted(vision_rates.items()):
        value = entry.get("value")
        timestamp = entry.get("timestamp", "n/a")
        print(f"| {clip} | {value} | {timestamp} |")
    print()

print("### Synthetic OCR Precision")
print()
if not ocr_precision:
    print("_No synthetic OCR metrics available._\n")
else:
    value = ocr_precision.get("value")
    timestamp = ocr_precision.get("timestamp", "n/a")
    print("| Metric | Value | Timestamp |")
    print("| --- | --- | --- |")
    print(f"| ocr.precision_synth | {value} | {timestamp} |")
    print()

warnings = []
hero_warn_path = Path("artifacts/e2e_hero1_warnings.json")
if hero_warn_path.exists():
    try:
        hero_warnings = json.loads(hero_warn_path.read_text())
        if isinstance(hero_warnings, list):
            warnings.extend(str(item) for item in hero_warnings)
    except json.JSONDecodeError:
        warnings.append(":warning: Unable to parse hero benchmark warnings artifact.")
static_entry = vision_rates.get("static")
if static_entry:
    static_rate = _coerce_float(static_entry.get("value"))
    if static_rate is not None and static_rate > 0.05:
        warnings.append(":warning: Static clip keyframe rate {:.3f} exceeds expected maximum (0.05).".format(static_rate))

if ocr_precision:
    precision_value = _coerce_float(ocr_precision.get("value"))
    if precision_value is not None and precision_value < 0.9:
        warnings.append(":warning: Synthetic OCR precision {:.3f} fell below expected minimum (0.9).".format(precision_value))

if reversal_warning_message:
    warnings.append(reversal_warning_message)

if warnings:
    print("#### Warnings")
    print()
    for line in warnings:
        print(f"- {line}")
    print()
PY
            else
              echo "_ASR/VAD metrics not yet available (soft gate)._";
            fi
          } >> "$GITHUB_STEP_SUMMARY"
          if [ -f "$reversal_flag_file" ]; then
            rate=$(cat "$reversal_flag_file")
            ref_display="${GITHUB_REF_NAME:-${GITHUB_HEAD_REF:-unknown}}"
            echo "::warning:: Audio reversal rate ${rate} exceeded 0.5 threshold on ref ${ref_display}."
          fi

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: artifacts/
          if-no-files-found: warn
